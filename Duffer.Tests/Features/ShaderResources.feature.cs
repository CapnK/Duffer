// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Duffer.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("\'Shader\' resources")]
    public partial class ShaderResourcesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ShaderResources.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "\'Shader\' resources", "In order to create useful IDTF files \r\nI want to be able to write out Shader reso" +
                    "urce list definitions", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("scene with one shader resource")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void SceneWithOneShaderResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("scene with one shader resource", new string[] {
                        "mytag"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have a new current scene", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("the current scene contains a shader resource list with a resource named \"ModelSha" +
                    "der0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And("the \"ModelShader0\" resource property for vertex colors is \"true\" and the material" +
                    " name is \"Mat01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("the \"ModelShader0\" resource has a texture layer called \"Texture0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.When("I export the current scene to a file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then("the contents of the current file should be", @"FILE_FORMAT ""IDTF""
FORMAT_VERSION 100

RESOURCE_LIST ""SHADER"" {
	RESOURCE_COUNT 1
	RESOURCE 0 {
		RESOURCE_NAME ""ModelShader0""
		ATTRIBUTE_USE_VERTEX_COLOR ""TRUE""
		SHADER_MATERIAL_NAME ""Mat01""
		SHADER_ACTIVE_TEXTURE_COUNT 1
		SHADER_TEXTURE_LAYER_LIST {
			TEXTURE_LAYER 0 {
				TEXTURE_NAME ""Texture0""
			}
		}
	}
}
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("scene with three shader resources")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void SceneWithThreeShaderResources()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("scene with three shader resources", new string[] {
                        "mytag"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I have a new current scene", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.And("the current scene contains a shader resource list with the following resources \"B" +
                    "ox010\", \"Box020\", \"Box030\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("\"Box010\" has the following properties: material name is \"Mat01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("\"Box020\" has the following properties: material name is \"Mat02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And("\"Box030\" has the following properties: material name is \"Mat03\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.When("I export the current scene to a file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("the contents of the current file should be", @"FILE_FORMAT ""IDTF""
FORMAT_VERSION 100

RESOURCE_LIST ""SHADER"" {
	RESOURCE_COUNT 3
	RESOURCE 0 {
		RESOURCE_NAME ""Box010""
		SHADER_MATERIAL_NAME ""Mat01""
		SHADER_ACTIVE_TEXTURE_COUNT 0
	}
	RESOURCE 1 {
		RESOURCE_NAME ""Box020""
		SHADER_MATERIAL_NAME ""Mat02""
		SHADER_ACTIVE_TEXTURE_COUNT 0
	}
	RESOURCE 2 {
		RESOURCE_NAME ""Box030""
		SHADER_MATERIAL_NAME ""Mat03""
		SHADER_ACTIVE_TEXTURE_COUNT 0
	}
}
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("scene with three shader resources with different texture lists")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void SceneWithThreeShaderResourcesWithDifferentTextureLists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("scene with three shader resources with different texture lists", new string[] {
                        "mytag"});
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
 testRunner.Given("I have a new current scene", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
 testRunner.And("the current scene contains a shader resource list with the following resources \"M" +
                    "odelShader1\", \"ModelShader2\", \"ModelShader3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.And("\"ModelShader1\" has the following properties: material name is \"Material1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("\"ModelShader2\" has the following properties: material name is \"Material2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And("\"ModelShader3\" has the following properties: material name is \"Material3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.And("the \"ModelShader1\" resource has two texture layers called \"Texture2\" and \"Texture" +
                    " RGB\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.And("the \"ModelShader2\" resource has a texture layer called \"Lines Texture\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.And("the \"ModelShader3\" resource has a texture layer called \"Texture3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.When("I export the current scene to a file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
 testRunner.Then("the contents of the current file should be", @"FILE_FORMAT ""IDTF""
FORMAT_VERSION 100

RESOURCE_LIST ""SHADER"" {
	RESOURCE_COUNT 3
	RESOURCE 0 {
		RESOURCE_NAME ""ModelShader1""
		SHADER_MATERIAL_NAME ""Material1""
		SHADER_ACTIVE_TEXTURE_COUNT 2
		SHADER_TEXTURE_LAYER_LIST {
			TEXTURE_LAYER 0 {
				TEXTURE_NAME ""Texture2""
			}
			TEXTURE_LAYER 1 {
				TEXTURE_NAME ""Texture RGB""
			}
		}
	}
	RESOURCE 1 {
		RESOURCE_NAME ""ModelShader2""
		SHADER_MATERIAL_NAME ""Material2""
		SHADER_ACTIVE_TEXTURE_COUNT 1
		SHADER_TEXTURE_LAYER_LIST {
			TEXTURE_LAYER 0 {
				TEXTURE_NAME ""Lines Texture""
			}
		}
	}
	RESOURCE 2 {
		RESOURCE_NAME ""ModelShader3""
		SHADER_MATERIAL_NAME ""Material3""
		SHADER_ACTIVE_TEXTURE_COUNT 1
		SHADER_TEXTURE_LAYER_LIST {
			TEXTURE_LAYER 0 {
				TEXTURE_NAME ""Texture3""
			}
		}
	}
}
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("scene with one shader resource with many texture properties")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void SceneWithOneShaderResourceWithManyTextureProperties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("scene with one shader resource with many texture properties", new string[] {
                        "mytag"});
#line 125
this.ScenarioSetup(scenarioInfo);
#line 126
 testRunner.Given("I have a new current scene", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 127
 testRunner.And("the current scene contains a shader resource list with a resource named \"ModelSha" +
                    "der1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
 testRunner.And("\"ModelShader1\" has the following properties: material name is \"ModelMaterial1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.And("the \"ModelShader1\" resource has a texture layer called \"lines\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.And("the texture layer \"lines\" has the following properties: \"1\", \"MULTIPLY\", \"CONSTAN" +
                    "T\", \"0.5\", \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.When("I export the current scene to a file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 132
 testRunner.Then("the contents of the current file should be", @"FILE_FORMAT ""IDTF""
FORMAT_VERSION 100

RESOURCE_LIST ""SHADER"" {
	RESOURCE_COUNT 1
	RESOURCE 0 {
		RESOURCE_NAME ""ModelShader1""
		SHADER_MATERIAL_NAME ""ModelMaterial1""
		SHADER_ACTIVE_TEXTURE_COUNT 1
		SHADER_TEXTURE_LAYER_LIST {
			TEXTURE_LAYER 0 {
				TEXTURE_LAYER_INTENSITY 1.000000
				TEXTURE_LAYER_BLEND_FUNCTION ""MULTIPLY""
				TEXTURE_LAYER_BLEND_SOURCE ""CONSTANT""
				TEXTURE_LAYER_BLEND_CONSTANT 0.500000
				TEXTURE_LAYER_ALPHA_ENABLED ""TRUE""
				TEXTURE_NAME ""lines""
			}
		}
	}
}
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
