// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Duffer.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("\'Shading\' modifier")]
    public partial class ShadingModifierFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ShadingModifiers.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "\'Shading\' modifier", "In order to create useful IDTF files \r\nI want to be able to write out shading mod" +
                    "ifier definitions", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("scene with one shading modifier")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void SceneWithOneShadingModifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("scene with one shading modifier", new string[] {
                        "mytag"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have a new current scene", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I add a shading modifier called \"Box01\" with one shader list with a item \"Box010\"" +
                    " in the shader name list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("I export the current scene to a file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then("the contents of the current file should be", @"FILE_FORMAT ""IDTF""
FORMAT_VERSION 100

MODIFIER ""SHADING"" {
	MODIFIER_NAME ""Box01""
	PARAMETERS {
		SHADER_LIST_COUNT 1
		SHADING_GROUP {
			SHADER_LIST 0 {
				SHADER_COUNT 1
				SHADER_NAME_LIST {
					SHADER 0 NAME: ""Box010""
				}
			}
		}
	}
}
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("scene with two shading modifiers")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void SceneWithTwoShadingModifiers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("scene with two shading modifiers", new string[] {
                        "mytag"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given("I have a new current scene", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
 testRunner.And("I add a shading modifier called \"Box01\" with one shader list with a item \"Box010\"" +
                    " in the shader name list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And("I add a shading modifier called \"Box02\" with one shader list with a item \"Box020\"" +
                    " in the shader name list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.When("I export the current scene to a file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.Then("the contents of the current file should be", @"FILE_FORMAT ""IDTF""
FORMAT_VERSION 100

MODIFIER ""SHADING"" {
	MODIFIER_NAME ""Box01""
	PARAMETERS {
		SHADER_LIST_COUNT 1
		SHADING_GROUP {
			SHADER_LIST 0 {
				SHADER_COUNT 1
				SHADER_NAME_LIST {
					SHADER 0 NAME: ""Box010""
				}
			}
		}
	}
}

MODIFIER ""SHADING"" {
	MODIFIER_NAME ""Box02""
	PARAMETERS {
		SHADER_LIST_COUNT 1
		SHADING_GROUP {
			SHADER_LIST 0 {
				SHADER_COUNT 1
				SHADER_NAME_LIST {
					SHADER 0 NAME: ""Box020""
				}
			}
		}
	}
}
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("scene with one shading modifiers containing two shaders")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void SceneWithOneShadingModifiersContainingTwoShaders()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("scene with one shading modifiers containing two shaders", new string[] {
                        "mytag"});
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("I have a new current scene", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
 testRunner.And("I add a shading modifier called \"Box01\" with one shader list with a shader \"Model" +
                    "Shader1\" and a shader \"ModelShader2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.When("I export the current scene to a file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
 testRunner.Then("the contents of the current file should be", @"FILE_FORMAT ""IDTF""
FORMAT_VERSION 100

MODIFIER ""SHADING"" {
	MODIFIER_NAME ""Box01""
	PARAMETERS {
		SHADER_LIST_COUNT 2
		SHADING_GROUP {
			SHADER_LIST 0 {
				SHADER_COUNT 1
				SHADER_NAME_LIST {
					SHADER 0 NAME: ""ModelShader1""
				}
			}
			SHADER_LIST 1 {
				SHADER_COUNT 1
				SHADER_NAME_LIST {
					SHADER 0 NAME: ""ModelShader2""
				}
			}
		}
	}
}
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
